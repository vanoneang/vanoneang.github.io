(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{290:function(e,t,i){},337:function(e,t,i){e.exports=i.p+"assets/img/Monolithic architecture@2x.9f7b7d57.png"},338:function(e,t,i){e.exports=i.p+"assets/img/Microservice architecture@2x.58891674.png"},339:function(e,t,i){e.exports=i.p+"assets/img/Monolith Vs Microservice image.df074706.png"},340:function(e,t,i){"use strict";i(290)},499:function(e,t,i){"use strict";i.r(t);i(340);var a=i(10),o=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"micro-services-vs-monolithic-architecture"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#micro-services-vs-monolithic-architecture"}},[e._v("#")]),e._v(" Micro-services vs monolithic architecture")]),e._v(" "),t("blockquote",[t("p",[e._v("micro-frontend vs mono-repository")])]),e._v(" "),t("div",{staticClass:"custom"},[t("p",[e._v("A monolithic application is built as a single unified unit while a microservices architecture is a collection of smaller, independently deployable services. Which one is right for you? It depends on a number of factors.")]),e._v(" "),t("h2",{attrs:{id:"what-is-a-monolithic-architecture"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#what-is-a-monolithic-architecture"}},[e._v("#")]),e._v(" What is a monolithic architecture?")]),e._v(" "),t("p",[e._v("A monolithic architecture is a traditional model of a software program, which is built as a unified unit that is self-contained and independent from other applications. A monolithic architecture is a traditional model of a software program, which is built as a unified unit that is self-contained and independent from other applications.")]),e._v(" "),t("p",[e._v("Monoliths can be convenient early on in a project's life for ease of code management, cognitive overhead, and deployment. This allows everything in the monolith to be released at once.")]),e._v(" "),t("img",{attrs:{src:i(337)}}),e._v(" "),t("h2",{attrs:{id:"advantages-of-a-monolithic-architecture"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#advantages-of-a-monolithic-architecture"}},[e._v("#")]),e._v(" Advantages of a monolithic architecture")]),e._v(" "),t("p",[e._v("Organizations can benefit from either a monolithic or microservices architecture, depending on a number of different factors. When developing using a monolithic architecture, the primary advantage is "),t("strong",[e._v("fast development speed")]),e._v(" due to the simplicity of having an application based on one code base.")]),e._v(" "),t("p",[e._v("The advantages of a monolithic architecture include:")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("Easy deployment")]),e._v(" "),t("ul",[t("li",[e._v("One executable file or directory makes deployment easier.")])])]),e._v(" "),t("li",[t("strong",[e._v("Development")]),e._v(" "),t("ul",[t("li",[e._v("When an application is built with one code base, it is easier to develop.")])])]),e._v(" "),t("li",[t("strong",[e._v("Performance")]),e._v(" "),t("ul",[t("li",[e._v("In a centralized code base and repository, one API can often perform the same function that numerous APIs perform with microservices.")])])]),e._v(" "),t("li",[t("strong",[e._v("Simplified testing")]),e._v(" "),t("ul",[t("li",[e._v("Since a monolithic application is a single, centralized unit, end-to-end testing can be performed faster than with a distributed application.")])])]),e._v(" "),t("li",[t("strong",[e._v("Easy debugging")]),e._v(" "),t("ul",[t("li",[e._v("With all code located in one place, it’s easier to follow a request and find an issue.")])])])]),e._v(" "),t("h2",{attrs:{id:"disadvantages-of-a-monolithic-architecture"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#disadvantages-of-a-monolithic-architecture"}},[e._v("#")]),e._v(" Disadvantages of a monolithic architecture")]),e._v(" "),t("p",[e._v("Making a small change in a single function requires compiling and testing the entire platform, which goes against the agile approach today’s developers favor.")]),e._v(" "),t("p",[e._v("The disadvantages of a monolith include:")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("Slower development speed")]),e._v(" "),t("ul",[t("li",[e._v("A large, monolithic application makes development more complex and slower.")])])]),e._v(" "),t("li",[t("strong",[e._v("Scalability")]),e._v(" "),t("ul",[t("li",[e._v("You can’t scale individual components.")])])]),e._v(" "),t("li",[t("strong",[e._v("Reliability")]),e._v(" "),t("ul",[t("li",[e._v("If there’s an error in any module, it could affect the entire application’s availability.")])])]),e._v(" "),t("li",[t("strong",[e._v("Barrier to technology adoption")]),e._v(" "),t("ul",[t("li",[e._v("Any changes in the framework or language affects the entire application, making changes often expensive and time-consuming.")])])]),e._v(" "),t("li",[t("strong",[e._v("Lack of flexibility")]),e._v(" "),t("ul",[t("li",[e._v("A monolith is constrained by the technologies already used in the monolith.")])])]),e._v(" "),t("li",[t("strong",[e._v("Deployment")]),e._v(" "),t("ul",[t("li",[e._v("A small change to a monolithic application requires the redeployment of the entire monolith.")])])])]),e._v(" "),t("h2",{attrs:{id:"what-are-microservices"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#what-are-microservices"}},[e._v("#")]),e._v(" What are microservices?")]),e._v(" "),t("p",[e._v("A microservices architecture, also simply known as microservices, is an architectural method that relies on a series of "),t("strong",[e._v("independently deployable services")]),e._v(". These services have their own business logic and database with a specific goal. Updating, testing, deployment, and scaling occur within each service. Microservices decouple major business, domain-specific concerns into separate, independent code bases. Microservices don’t reduce complexity, but they make any complexity "),t("strong",[e._v("visible and more manageable")]),e._v(" by separating tasks into smaller processes that function independently of each other and contribute to the overall whole.")]),e._v(" "),t("img",{attrs:{src:i(338)}}),e._v(" "),t("h2",{attrs:{id:"advantages-of-microservices"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#advantages-of-microservices"}},[e._v("#")]),e._v(" Advantages of microservices")]),e._v(" "),t("p",[e._v("Since a microservices architecture consists of units that run independently, each service can be developed, updated, deployed, and scaled without affecting the other services. Software updates can be performed more frequently, with improved reliability, uptime, and performance. We went from pushing updates once a week, to two to three times a day.")]),e._v(" "),t("p",[e._v("Plus, more generally, microservices make it easier for teams to update code and accelerate release cycles with continuous integration and continuous delivery (CI/CD). Teams can experiment with code and roll back if something goes wrong.")]),e._v(" "),t("p",[e._v("In short, the advantages of microservices are:")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("Agility")]),e._v(" "),t("ul",[t("li",[e._v("Promote agile ways of working with small teams that deploy frequently.")])])]),e._v(" "),t("li",[t("strong",[e._v("Flexible scaling")]),e._v(" "),t("ul",[t("li",[e._v("If a microservice reaches its load capacity, new instances of that service can rapidly be deployed to the accompanying cluster to help relieve pressure. We are now multi-tenanant and stateless with customers spread across multiple instances. Now we can support much larger instance sizes.")])])]),e._v(" "),t("li",[t("strong",[e._v("Continuous deployment")]),e._v(" "),t("ul",[t("li",[e._v("We now have frequent and faster release cycles. Before we would push out updates once a week and now we can do so about two to three times a day.")])])]),e._v(" "),t("li",[t("strong",[e._v("Highly maintainable and testable")]),e._v(" "),t("ul",[t("li",[e._v("Teams can experiment with new features and roll back if something doesn’t work. This makes it easier to update code and accelerates time-to-market for new features. Plus, it is easy to isolate and fix faults and bugs in individual services.")])])]),e._v(" "),t("li",[t("strong",[e._v("Independently deployable")]),e._v(" "),t("ul",[t("li",[e._v("Since microservices are individual units they allow for fast and easy independent deployment of individual features.")])])]),e._v(" "),t("li",[t("strong",[e._v("Technology flexibility")]),e._v(" "),t("ul",[t("li",[e._v("Microservice architectures allow teams the freedom to select the tools they desire.")])])]),e._v(" "),t("li",[t("strong",[e._v("High reliability")]),e._v(" "),t("ul",[t("li",[e._v("You can deploy changes for a specific service, without the threat of bringing down the entire application.")])])]),e._v(" "),t("li",[t("strong",[e._v("Happier teams")]),e._v(" "),t("ul",[t("li",[e._v("The Atlassian teams who work with microservices are a lot happier, since they are more autonomous and can build and deploy themselves without waiting weeks for a pull request to be approved.")])])])]),e._v(" "),t("h2",{attrs:{id:"disadvantages-of-microservices"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#disadvantages-of-microservices"}},[e._v("#")]),e._v(" Disadvantages of microservices")]),e._v(" "),t("p",[e._v("When we moved from a small number of monolithic codebases to many more distributed systems and services powering our products, "),t("strong",[e._v("unintended complexity arose")]),e._v(". We initially struggled to add new capabilities with the same velocity and confidence as we had done in the past. "),t("strong",[e._v("Microservices can add increased complexity")]),e._v(" that leads to development sprawl, or rapid and unmanaged growth. It can be challenging to determine how different components relate to each other, who owns a particular software component, or how to avoid interfering with dependent components.")]),e._v(" "),t("p",[e._v("The disadvantages of microservices can include:")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("Development extension")]),e._v(" "),t("ul",[t("li",[e._v("Microservices add more complexity compared to a monolith architecture, since there are more services in more places created by multiple teams. If development sprawl isn’t properly managed, it results in slower development speed and poor operational performance.")])])]),e._v(" "),t("li",[t("strong",[e._v("Exponential infrastructure costs")]),e._v(" "),t("ul",[t("li",[e._v("Each new microservice can have its own cost for test suite, deployment playbooks, hosting infrastructure, monitoring tools, and more.")])])]),e._v(" "),t("li",[t("strong",[e._v("Added organizational overhead")]),e._v(" "),t("ul",[t("li",[e._v("Teams need to add another level of communication and collaboration to coordinate updates and interfaces.")])])]),e._v(" "),t("li",[t("strong",[e._v("Debugging challenges")]),e._v(" "),t("ul",[t("li",[e._v("Each microservice has its own set of logs, which makes debugging more complicated. Plus, a single business process can run across multiple machines, further complicating debugging.")])])]),e._v(" "),t("li",[t("strong",[e._v("Lack of standardization")]),e._v(" "),t("ul",[t("li",[e._v("Without a common platform, there can be a proliferation of languages, logging standards, and monitoring.")])])]),e._v(" "),t("li",[t("strong",[e._v("Lack of clear ownership")]),e._v(" "),t("ul",[t("li",[e._v("As more services are introduced, so are the number of teams running those services. Over time it becomes difficult to know the available services a team can leverage and who to contact for support.")])])])]),e._v(" "),t("img",{attrs:{src:i(339)}}),e._v(" "),t("h2",{attrs:{id:"tips-to-migrate-from-a-monolith-to-microservices-architecture"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tips-to-migrate-from-a-monolith-to-microservices-architecture"}},[e._v("#")]),e._v(" Tips to migrate from a monolith to microservices architecture")]),e._v(" "),t("p",[e._v("Many projects initially start out as a monolith and then evolve into a microservice architecture. As new features are added to a monolith, it may start to become cumbersome to have many developers working on a singular codebase. Code conflicts become more frequent and the risk of updates to one feature introducing bugs in an unrelated feature increases. When these undesirable patterns arise, it may be time to consider a migration to microservices.")]),e._v(" "),t("p",[e._v("The following are some of the best practices we learned from our migration:")]),e._v(" "),t("ul",[t("li",[e._v("Map out a migration strategy")]),e._v(" "),t("li",[e._v("Tooling")]),e._v(" "),t("li",[e._v("Manage expectations")]),e._v(" "),t("li",[e._v("Embrace a culture shift")]),e._v(" "),t("li",[e._v("Balance speed and trust")])]),e._v(" "),t("h2",{attrs:{id:"in-summary"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#in-summary"}},[e._v("#")]),e._v(" In summary")]),e._v(" "),t("p",[e._v("Microservices may not be for everyone. A legacy monolith may work perfectly well, and breaking it down may not be worth the trouble. But as organizations grow and the demands on their applications increase, microservices architecture can be worthwhile.")]),e._v(" "),t("h2",{attrs:{id:"reference"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[e._v("#")]),e._v(" Reference")]),e._v(" "),t("ol",[t("li",[t("a",{attrs:{href:"https://www.atlassian.com/microservices/microservices-architecture/microservices-vs-monolith",target:"_blank",rel:"noopener noreferrer"}},[e._v("Microservices vs. monolithic architecture"),t("OutboundLink")],1)])])]),e._v(" "),t("RightMenu")],1)}),[],!1,null,null,null);t.default=o.exports}}]);