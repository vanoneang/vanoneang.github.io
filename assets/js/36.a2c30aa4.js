(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{362:function(t,e,a){t.exports=a.p+"assets/img/gui.b164cc3c.png"},363:function(t,e,a){t.exports=a.p+"assets/img/gitk.024aeb06.png"},364:function(t,e,a){t.exports=a.p+"assets/img/undoing.8e68e6ab.png"},514:function(t,e,a){"use strict";a.r(e);var n=a(10),s=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"git"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" Git")]),t._v(" "),e("h2",{attrs:{id:"基础命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基础命令"}},[t._v("#")]),t._v(" 基础命令")]),t._v(" "),e("p",[e("strong",[t._v("平时工作：")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("拉取项目：git pull\n\n暂存本地：git add .\n\n查看暂存：git status\n\n提交本地仓库：git commit -m '本次提交注释'\n\n提交远程仓库：git push [origin master] // []可以省略\n\nmaster之外的分支直接使用git push:\ngit push --set-upstream origin develop\n")])])]),e("p",[t._v("We can use the "),e("code",[t._v("git gui")]),t._v(" command to open a UI window that can be handled manually.")]),t._v(" "),e("img",{attrs:{src:a(362)}}),t._v(" "),e("p",[t._v("Similarly, we can use the "),e("code",[t._v("gitk")]),t._v(" command to view the visual git log.")]),t._v(" "),e("img",{attrs:{src:a(363)}}),t._v(" "),e("h2",{attrs:{id:"undoing-changes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#undoing-changes"}},[t._v("#")]),t._v(" Undoing changes")]),t._v(" "),e("p",[t._v("The following is a summary of undoing changes.")]),t._v(" "),e("img",{attrs:{src:a(364)}}),t._v(" "),e("p",[e("strong",[t._v("How to work with the working directory?")]),t._v(" If a new file is added, git knows nothing about it. When we use "),e("code",[t._v("git status")]),t._v(" command, it will show "),e("code",[t._v("Untracked files")]),t._v(". At this time, we need to use the "),e("code",[t._v("git clean -xdf")]),t._v(" command to remove the new file.")]),t._v(" "),e("p",[t._v("If we use the "),e("code",[t._v("git add .")]),t._v(" command which means moving "),e("code",[t._v("Unstaged changes")]),t._v(" to "),e("code",[t._v("Staged Changes")]),t._v(". Currently the "),e("code",[t._v("git checkout")]),t._v(" command is useless. To handle the staging area, we can use the "),e("code",[t._v("git reset -- file.txt")]),t._v(" command.")]),t._v(" "),e("p",[e("strong",[t._v("How can we undo the committed log?")]),t._v(" If we want to update the previous commit, we can use the "),e("code",[t._v("git commit --amend -m 'commit message'")]),t._v(" command.")]),t._v(" "),e("p",[e("strong",[t._v("偶尔使用：")])]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("\n本地项目和远端GitHub连接：git remote "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" origin https://github.com/vanoneang/vue-music.git\n\n更改本地仓库的远程连接：git remote set-url origin https://github.com/vanoneang/vue-music.git\n\n查看本地仓库的远程连接：git remote "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-v")]),t._v("\n\n查看用户名：git config user.name\n\n查看邮箱：git config user.email\n\n强行覆盖之前版本：git push "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-u")]),t._v(" origin master "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-f")]),t._v(" \n\n查看所有分支：git branch "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-a")]),t._v("\n\n查看本地分支：git branch\n\n创建本地分支，但依旧停留在当前分支：git branch devel\n\n切换远程分支并创建到本地：git checkout "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-b")]),t._v(" devel origin/devel\n\n本地创建分支，并推送到远端：\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-b")]),t._v(" devel\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin devel:devel\n\n删除本地分支"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("先切换到master分支"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("：git branch "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-D")]),t._v(" devel\n\n-D是--delete --force的缩写，你也可以写成-df。\n\n删除远端分支: "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--delete")]),t._v(" devel\n\n切换本地分支：git checkout master\n\n查看远程库的一些信息，及与本地分支的信息: "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote show origin\n\n删除本地库中这些相比较远程库中已经不存在的分支: "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote prune origin\n\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" - "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase HEAD~2 "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-i")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" - pick 最新记录 （这里是合并到）\n    squash 第二条 （这里是被合并的）\n    squash 第三条（这里是被合并的）\n~的作用是在纵向上定位。它可以一直追溯到最早的祖先commit。如果commit历史有分叉，那它就选第一个，也就是主干上的那个。\n\n\n修正上一条commit\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--amend")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--oneline")]),t._v("\n\nmerge分支:\n\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(". 首先确保开发分支commit、push处理完毕\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(". 切换到master，执行git pull，确保是最新代码\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(". 切换到开发分支,为了保险起见，你可以在merge前先建一个备份分支\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(". 执行git rebase master，如果有冲突，解决掉\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(". 申请merge request，等待管理员同意\n")])])]),e("h2",{attrs:{id:"git-flow"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-flow"}},[t._v("#")]),t._v(" Git Flow")]),t._v(" "),e("p",[e("strong",[t._v("GitFlow定义了一个围绕项目发布的严格的分支模型")])]),t._v(" "),e("img",{attrs:{src:t.$withBase("/assets/gitflow.png")}}),t._v(" "),e("ul",[e("li",[e("p",[t._v("master 主分支")])]),t._v(" "),e("li",[e("p",[t._v("hotfix bug紧急修复分支 hotfix/")])]),t._v(" "),e("li",[e("p",[t._v("release 发布分支，给qa测试使用 release/")])]),t._v(" "),e("li",[e("p",[t._v("develop "),e("strong",[t._v("开发分支（我们主要用这个）")])])]),t._v(" "),e("li",[e("p",[t._v("feature 功能分支，开发新功能，可以同时有好几个不同的feature分支，完成以后合并到开发分支 feature/")])])]),t._v(" "),e("ol",[e("li",[e("p",[t._v("当项目开发完毕，把当前开发分支合并到发布分支，如果bug紧急需要修复，打一个hotfix分支，确认没问题了，合并到发布分支，打一个tag，这时候把最新的发布分支合并主分支和开发分支，然后删除发布分支；")])]),t._v(" "),e("li",[e("p",[t._v("当项目正常运行状态，突然发现bug，这时候从主分支，打一个hotfix分支，修复完成之后合并回主分支，并且打一个新的tag，同时，把最新的代码合并到开发分支，相当于同时维护master分支和develop分支；")])]),t._v(" "),e("li",[e("p",[t._v("master分支和develop分支是长期存在的，其他分支完成使命后要删除。")])]),t._v(" "),e("li",[e("p",[t._v("hotfix/release/feature这三个分支的名字，作为一个文件夹类似的东西，比如hotfix/login")])]),t._v(" "),e("li",[e("p",[t._v("新功能分支不能与master分支有交互")])]),t._v(" "),e("li",[e("p",[t._v("如果从develop上切出来一个feature分支，这时候develop和feature分支都在往前走，feature上已经有很多次commit了，如果想要把这些commit合并成一个，执行git rebase develop，解决冲突，然后上传，切到develop分支，git merge feature合并过来，删除feature")])])]),t._v(" "),e("RightMenu")],1)}),[],!1,null,null,null);e.default=s.exports}}]);