(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{292:function(e,t,a){},349:function(e,t,a){e.exports=a.p+"assets/img/attack-tree.8464b410.png"},350:function(e,t,a){"use strict";a(292)},504:function(e,t,a){"use strict";a.r(t);a(350);var s=a(10),r=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"secure-coding"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#secure-coding"}},[e._v("#")]),e._v(" Secure Coding")]),e._v(" "),t("div",{staticClass:"custom"},[t("p",[e._v("A software security threat is anything or anybody that could harm your software system.")]),e._v(" "),t("h2",{attrs:{id:"software-security-threats"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#software-security-threats"}},[e._v("#")]),e._v(" Software Security Threats")]),e._v(" "),t("p",[e._v("Architectural Design -> Detailed Design -> Code -> Hardware")]),e._v(" "),t("p",[e._v("There are various threats to software security. Each layer represents potential threats to software security.")]),e._v(" "),t("p",[e._v("To prevent hardware-level threats like natural disasters we can use cloud service.")]),e._v(" "),t("p",[e._v("About code-level threats, it has unintentional and intentional threats(malicious insider -> logic bomb).  To prevent unintentional code-level threats:")]),e._v(" "),t("ul",[t("li",[e._v("software security education and training is critical")]),e._v(" "),t("li",[e._v("automation such as static and dynamic code analysis to identify vulnerabilities is the key.")]),e._v(" "),t("li",[e._v("Once identified, the vulnerabilities need to be managed properly until they are mitigated satisfactorily.")])]),e._v(" "),t("p",[e._v("To prevent intentional code-level threats, security oversight such as "),t("strong",[e._v("peer code review, job rotation and mandatory vacation is essential")]),e._v(". Code-level threats are preventable, but requires a lot of resources to manage them properly.")]),e._v(" "),t("p",[e._v("To avoid threats at a detailed design level, adhere to the design patterns. And also, use the well-known")]),e._v(" "),t("h2",{attrs:{id:"requirements-level-threats-to-software-security"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#requirements-level-threats-to-software-security"}},[e._v("#")]),e._v(" Requirements-Level Threats to Software Security")]),e._v(" "),t("p",[e._v("Collecting security requirements is a challenging task. You need expertise in Requirements Engineering as well as Information System Security which is often a rare combination.")]),e._v(" "),t("p",[e._v("The biggest problem is that customers and users also don't know what they want with respect to security. On the other hand, requirements engineers don't know what questions to ask to elicit security requirements. This combined lack of security expertise lead to missing or unidentified security requirements. These unaddressed security requirements in turn result in security vulnerabilities.")]),e._v(" "),t("p",[e._v("There could a few solutions to mitigate the requirements level threat to software security. The most obvious solution is to provide an extra resource to the team of requirements engineers. That is, provide a software security expert to work with the requirements engineers. This is easier said that done because of the monetary investment required.")]),e._v(" "),t("p",[e._v("A compromise could be the use of a comprehensive security requirements checklist. Each stakeholder, during the requirements process, can work with the checklist. Then the requirements engineers can ask intelligent questions while the customers or users can provide educated answers, Correcting the missing security requirements tends to be costly as in the case of any missing requirements. You might have to rewrite the entire software in the worst case scenario.")]),e._v(" "),t("h2",{attrs:{id:"understand-an-attacker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#understand-an-attacker"}},[e._v("#")]),e._v(" Understand an Attacker")]),e._v(" "),t("p",[e._v("The mind of an attacker or bad actor is foreign to many software developers. We spent our lives building things that we hope make the world a better price. I know that is kind of cliche, but the reality is most of us want to write code that improves our business or engages our passion. As such, we are builders and makers.")]),e._v(" "),t("p",[e._v("An attacker, however, has a very different mindset. They want to tear down what you have built. Now, their motivations can be all over the place, and while it is important to understand these "),t("strong",[e._v("motivations")]),e._v(", the simple fact that they want to tear down what we build is very hard for many developers to grasp. So part of writing secure code is understanding the mindset of the attacker.")]),e._v(" "),t("p",[e._v("The first component is looking at why they want to break your code. Now, the reasons can be as many as the stars in the sky, but each attacker has a reason. Most attacks we hear about seem to be "),t("strong",[e._v("financial")]),e._v(" in purpose, but attacks happen for other reasons, things like "),t("strong",[e._v("political motivations, revenge, or building credit")]),e._v(" with other bad actors, to name a few. I have seen attacks happen because people want to build a reputation as a security tester. While I'm not a fan of this type of extortion, it currently is a reason why people are attacking systems. Now, regardless of the why, it's very beneficial to figure out all of the possible attack reasons. This why is critical because once you know why attackers might disrupt your application, you can start looking at the possible exploits that could exist in your system. This is really the heart of understanding the attacker.")]),e._v(" "),t("p",[e._v("As a developer, truly understanding an attacker is one of the most difficult challenges in my opinion. But once you start recognizing the "),t("strong",[e._v("mindset")]),e._v(" of an attacker, it opens up a wealth of new ways to protect your system. For instance, understanding motivations allows you to look at an attack vector in your application by thinking through the lens of the attacker.")]),e._v(" "),t("p",[e._v("Once you collect this information, you can start building an attack tree. The attack tree allows you to build scenarios based on probable attacks. With these scenarios, you can determine where you need to add testing, increase threat detection, or apply mitigating controls. Getting into the mindset of the attacker can be a huge undertaking. However, it can reap significant rewards to your organizations.")]),e._v(" "),t("img",{attrs:{src:a(349)}}),e._v(" "),t("h2",{attrs:{id:"web-client-server-interaction-code-issues"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#web-client-server-interaction-code-issues"}},[e._v("#")]),e._v(" Web Client Server Interaction Code Issues")]),e._v(" "),t("h3",{attrs:{id:"input-validation-issues"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#input-validation-issues"}},[e._v("#")]),e._v(" Input validation issues")])])])}),[],!1,null,null,null);t.default=r.exports}}]);