(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{334:function(e,t,a){e.exports=a.p+"assets/img/event-loop.5ff168f3.png"},335:function(e,t,a){e.exports=a.p+"assets/img/event-loop-node.d8faa11f.png"},497:function(e,t,a){"use strict";a.r(t);var s=a(10),n=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"event-loop"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#event-loop"}},[e._v("#")]),e._v(" Event Loop")]),e._v(" "),t("p",[e._v("How does JavaScript actually work?")]),e._v(" "),t("p",[e._v("First, let's look at what JavaScript are. JavaScript is a single-threaded non-blocking asynchronous concurrent language. JavaScript has a call stack, an event loop, a callback queue, some other apis and stuff. Does v8 also has these things? No, v8 has a call stack and a heap.")]),e._v(" "),t("p",[t("strong",[e._v("About the call stack")])]),e._v(" "),t("p",[e._v("Means one thread  == one call stack == one thing at a time.")]),e._v(" "),t("p",[e._v("As the JavaScript runtime can do only one thing at a time, how the things happened concurrently. This is because the browser gives us these other things, gives us these web APIs. Those pieces of the browser are aware of this concurrency kicks in.")]),e._v(" "),t("img",{attrs:{src:a(334)}}),e._v(" "),t("p",[e._v("How about in node environment? Instead of the web APIs we have C++ APIs and the threading is being hidden from you by C++.")]),e._v(" "),t("img",{attrs:{src:a(335)}})])}),[],!1,null,null,null);t.default=n.exports}}]);