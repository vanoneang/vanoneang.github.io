(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{321:function(t,e,s){t.exports=s.p+"assets/img/PR.b8bd2f42.png"},490:function(t,e,s){"use strict";s.r(e);var a=s(10),n=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"开源项目lin-cms的开发流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#开源项目lin-cms的开发流程"}},[t._v("#")]),t._v(" 开源项目Lin CMS的开发流程")]),t._v(" "),e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/TaleLin",target:"_blank",rel:"noopener noreferrer"}},[t._v("林间有风"),e("OutboundLink")],1),t._v("团队目前共有两个开源项目，一个是微信小程序原生组件库 Lin UI，一个是前后端分离的web端内容管理系统 Lin CMS。笔者属于 Lin CMS 前端小组，也就是 lin-cms-vue 项目。从 "),e("code",[t._v("2019年1月17日")]),t._v(" 提交第一个 commit 至今差不多已经半年时间，在磕磕绊绊中也有了些许成长。")]),t._v(" "),e("p",[t._v("本文主要介绍 lin-cms-vue 的开发流程。刚开始团队成员较少，都是在一个分支上进行开发，并没有过多的考虑什么流程方案。后来由于团队成员的不断补充，我们开始规范开发流程，采用的是目前比较主流的 GitFlow 工作流。一个好的、统一的开发流程，在团队合作中是至关重要的，能够极大的提升工作效率。那么下面大致介绍下 GitFlow 工作流。")]),t._v(" "),e("h2",{attrs:{id:"gitflow工作流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gitflow工作流"}},[t._v("#")]),t._v(" GitFlow工作流")]),t._v(" "),e("p",[t._v("虽然有这么优秀的版本管理工具（Git），但是我们面对版本管理的时候，依然有非常大的挑战，大家工作在同一个仓库上，那么彼此的代码协作必然带来很多问题和挑战，如下：")]),t._v(" "),e("ul",[e("li",[t._v("如何开始一个 Feature 的开发，而不影响别的 Feature？")]),t._v(" "),e("li",[t._v("由于很容易创建新分支，分支多了如何管理，时间久了，如何知道每个分支是干什么的？哪些分支已经合并回了主干？")])]),t._v(" "),e("p",[t._v("GitFlow 被誉为是在 Git 之上构建的一项软件开发最佳实践，"),e("strong",[t._v("它定义了一个围绕项目发布的严格分支模型")]),t._v("。GitFlow 没有增加任何新的概念和命令，它只是一个 git 管理的规范，一个开发的指导方针。")]),t._v(" "),e("img",{attrs:{src:t.$withBase("/assets/gitflow.png")}}),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("分支")]),t._v(" "),e("th",[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("master")]),t._v(" "),e("td",[t._v("主分支(保护分支)")])]),t._v(" "),e("tr",[e("td",[t._v("develop")]),t._v(" "),e("td",[t._v("开发分支(保护分支)")])]),t._v(" "),e("tr",[e("td",[t._v("hotfix/")]),t._v(" "),e("td",[t._v("bug紧急修复分支")])]),t._v(" "),e("tr",[e("td",[t._v("feature/")]),t._v(" "),e("td",[t._v("功能分支，开发新功能，完成以后合并到开发分支")])])])]),t._v(" "),e("p",[t._v("通过上面的简单介绍我们大致了解了什么是 GitFlow 工作流，当然这只是一个指导方针，在实际应用中还要根据项目及成员的具体情况来进行适当的调整。")]),t._v(" "),e("p",[t._v("我们将 "),e("code",[t._v("master")]),t._v(" 和 "),e("code",[t._v("develop")]),t._v(" 分支列为保护分支。保护分支意味着任何人不得直接提交代码到该分支，只能通过 "),e("code",[t._v("Pull Request")]),t._v(" 合并分支。下面以一个新功能的开发为例，介绍下相关开发流程。")]),t._v(" "),e("h2",{attrs:{id:"开发流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#开发流程"}},[t._v("#")]),t._v(" 开发流程")]),t._v(" "),e("p",[t._v("这里以开发一个新的功能验证码（security code）为例：")]),t._v(" "),e("h3",{attrs:{id:"开发新feature"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#开发新feature"}},[t._v("#")]),t._v(" 开发新Feature")]),t._v(" "),e("p",[t._v("从当前最新的开分分支 "),e("code",[t._v("develop")]),t._v(" 切出一个 "),e("code",[t._v("feature")]),t._v(" 功能分支，执行下面命令，注意这是在本地仓库的新分支：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-b")]),t._v(" security-code\n")])])]),e("p",[t._v("在 "),e("code",[t._v("security-code")]),t._v(" 分支编写功能代码，提交commit，到此时我们均是在本地仓库操作，如果想要将本地的 security-code 分支 push 到远端，执行下面命令，其中 feature/ 代表这是一个功能分支：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin security-code:feature/security-code\n\n * "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("new branch"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("      security-code -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" feature/security-code\n")])])]),e("p",[t._v("在远端创建了 feature/security-code 分支后，security-code 的功能还没有开放完毕，需要继续开发并提交 commit。将近期 commit 提交至远端，执行以下命令：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin HEAD:feature/security-code\n")])])]),e("p",[t._v("如果在开发 "),e("code",[t._v("security-code")]),t._v(" 时，有小伙伴将新功能合入了 "),e("code",[t._v("develop")]),t._v(" 而 security-code 又依赖新功能怎么办？那就把远端已经合并过最新的开发分支 develop 拉下来：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull origin develop\n")])])]),e("p",[t._v("假设 "),e("code",[t._v("security-code")]),t._v(" 已经开发完毕，并且有10条commit记录，我们要将功能分支的代码合并到开发分支：提交 "),e("code",[t._v("PR")]),t._v(" 到 "),e("code",[t._v("develop")]),t._v(" 分支。 不管是团队成员还是外部贡献者的 pull request 都需要经过代码 "),e("code",[t._v("review")]),t._v(" 才能合并进开发分支。代码合并有三种方式："),e("strong",[t._v("Create a merge commit / Squash and merge / Rebase and merge")]),t._v("。")]),t._v(" "),e("p",[t._v("\b"),e("img",{attrs:{src:s(321)}})]),t._v(" "),e("p",[t._v("第一种 (Create a merge commit) 直接将 "),e("code",[t._v("security-code")]),t._v(" 分支的 commit 合并到 "),e("code",[t._v("develop")]),t._v("。")]),t._v(" "),e("p",[t._v("第二种 (Squash and merge) 将 "),e("code",[t._v("security-code")]),t._v(" 分支的这10条 commit 合并成一条后，再合入 "),e("code",[t._v("develop")]),t._v("（建议使用）。")]),t._v(" "),e("p",[t._v("第三种 (Rebase and merge) 与第二种功能一样，区别是 rebase 变基，squash 只合并 commit。")]),t._v(" "),e("p",[t._v("合并分支后即可将功能分支删除，删除分支分为删除本地分支和远端分支，远端分支的删除直接在 GitHub 页面操作即可，下面的命令来删除本地分支：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-D")]),t._v(" security-code\n")])])]),e("p",[t._v("经过长时间的分支增删后，我们会发现有些远端的分支分明已经删掉了，但是在本地分支通过 "),e("code",[t._v("git branch -a")]),t._v(" 还是能够看到那些已经被删除掉的分支，这时候我们可以用下面的命令进行清理：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote prune origin\n\n➜  lin-cms-vue git:"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exception"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote prune origin\n修剪 origin\nURL：https://github.com/TaleLin/lin-cms-vue.git\n * "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("已删除"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" origin/components/select\n * "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("已删除"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" origin/feature/404\n * "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("已删除"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" origin/feature/enter-animation\n * "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("已删除"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" origin/feature/layout\n * "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("已删除"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" origin/feature/ui-color\n * "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("已删除"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" origin/feature/ui-op\n * "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("已删除"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" origin/publish/beta2\n")])])]),e("h3",{attrs:{id:"版本发布"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#版本发布"}},[t._v("#")]),t._v(" 版本发布")]),t._v(" "),e("p",[t._v("经过一段时间的开发，我们完成了一个阶段的开发任务。这时候要进行功能测试，将当前开发分支的代码部署到测试环境，团队成员共同完成测试。如果发现bug及时进行修复，如无异常，则发布新版本：")]),t._v(" "),e("ol",[e("li",[t._v("从 develop 提交 PR 到 master 主分支，打tag；")]),t._v(" "),e("li",[t._v("添加该版本相关文档介绍；")]),t._v(" "),e("li",[t._v("编写版本日志。")])]),t._v(" "),e("h2",{attrs:{id:"更新github新版本到自己的项目"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#更新github新版本到自己的项目"}},[t._v("#")]),t._v(" 更新GitHub新版本到自己的项目")]),t._v(" "),e("p",[t._v("Lin CMS有一个"),e("a",{attrs:{href:"http://face.cms.7yue.pro",target:"_blank",rel:"noopener noreferrer"}},[t._v("线上演示项目"),e("OutboundLink")],1),t._v("，在开源项目新版本发布后，跟大家一样，笔者要转换角色以一个开源项目使用者的身份进行线上项目升级。但是，作为工程类的开源项目，不能像一些只引用核心库的开源项目那样，直接更新版本就行，我们的项目本身已经有写的有业务了，这时候要怎么办呢？")]),t._v(" "),e("p",[t._v("如果没有修改框架的核心代码，只是新增了一些业务文件，可以直接将框架核心代码替换掉。如果是另一种情况已经修改了框架的核心代码，这时候想要升级就要比较小心了，需要更新GitHub新版本到自己的项目。"),e("strong",[t._v("这种方法其实是比较危险的，要求你能够完全把握住冲突的部分那些是需要的，那些不需要的。")])]),t._v(" "),e("ol",[e("li",[t._v("首先，添加开源项目的远程链接：")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" lin-cms-vue https://github.com/TaleLin/lin-cms-vue.git\n")])])]),e("p",[t._v("添加后可以通过下面的命令查看下本地项目的远程链接列表：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-v")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ➜  lin-cms-demo git:(master) git remote -v")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# lin-cms-vue\thttps://github.com/TaleLin/lin-cms-vue.git (fetch)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# lin-cms-vue\thttps://github.com/TaleLin/lin-cms-vue.git (push)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# origin\thttps://git.coding.net/indexer/lin-cms-demo.git (fetch)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# origin\thttps://git.coding.net/indexer/lin-cms-demo.git (push)")]),t._v("\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("然后，将开源项目新版本 merge 到本地项目，这里的 --allow-unrelated-histories 是允许 merge 不相关的仓库：")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge lin-cms-vue/master --allow-unrelated-histories\n")])])]),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),e("p",[t._v("如果在merge后，发现项目"),e("strong",[t._v("改崩掉了")]),t._v("，这时候记得"),e("strong",[t._v("不要提交commit")]),t._v("，执行下面的命令，将"),e("strong",[t._v("本次修改全部撤回")]),t._v("。")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n")])])]),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),e("p",[t._v("以上就是 "),e("a",{attrs:{href:"https://github.com/TaleLin/lin-cms-vue",target:"_blank",rel:"noopener noreferrer"}},[t._v("lin-cms-vue"),e("OutboundLink")],1),t._v(" 的开发流程总结。文笔很菜，之前也很少进行这种文字形式的输出，以后会更多的加强锻炼，希望能给本文的读者带来一丝收获。")]),t._v(" "),e("p",[t._v("笔者现在也是处于学习阶段，如有错误欢迎指正，觉得有用的可以帮忙给开源项目点个Star，QQ讨论群：814597236，感谢！")]),t._v(" "),e("RightMenu")],1)}),[],!1,null,null,null);e.default=n.exports}}]);